{
  "rules": {
    "users": {
      "$uid": {
        "username": {
          ".read": "auth !== null",
          ".write": "$uid === auth.uid && (!data.exists() || !root.child('usernames').child(data.val()).exists())",
          ".validate": "newData.isString() && newData.val().length < 50"
        },
				"agendas": {
          ".read": "$uid === auth.uid",
          "$agenda": {
            ".write": "root.child('permissions').child($agenda).child(auth.uid).val() === 'editor'",
            ".validate": "root.child('permissions').child($agenda).hasChild($uid)"
          }
        },
        "createdApps": {
          ".read": "$uid === auth.uid",
          "$app": {
            ".validate": "newData.isBoolean() && newData.val() === true"
          }
        },
        "maxApps": {
          ".read": "$uid === auth.uid"
				},
        "apps": {
          ".read": "$uid === auth.uid",
          ".validate": "newData.hasChildren()",
          "$app": {
            ".write": "$uid === auth.uid && !newData.exists()",
            ".validate": "newData.hasChildren() && root.child('apps').child($app).exists()",
            "scopes": {
              ".write": "$uid === auth.uid",
              ".validate": "newData.hasChildren()",
              "$scope": {
                ".validate": "newData.isBoolean() && newData.val() === true"
							}
            }
          }
				},
        "setupComplete": {
          ".read": "$uid === auth.uid",
          ".write": "$uid === auth.uid",
          ".validate": "newData.val() === true"
        }
      }
    },

    "apps": {
			"$app": {
        "owner": {
          ".read": "auth !== null",
          ".write": "root.child('users').child(auth.uid).child('createdApps').hasChild($app) && newData.exists()",
          ".validate": "newData.isString() && newData.val() === auth.uid"
				},
        "name": {
          ".read": "auth !== null",
          ".write": "data.parent().child('owner').val() === auth.uid"
        },
        "oauth": {
          "redirect": {
            ".write": "data.parent().parent().child('owner').val() === auth.uid",
            ".validate": "newData.isString() && newData.val().length < 1000"
					}
        },
        ".read": "data.child('owner').val() === auth.uid",
        ".write": "root.child('users').child(auth.uid).child('createdApps').hasChild($app) && !newData.exists()"
      }
		},

    "usernames": {
      "$username": {
        ".read": "auth !== null",
        ".write": "!data.exists() || data.val() === auth.uid",
        ".validate": "newData.val() === auth.uid && root.child('users').child(auth.uid).child('username').val() === $username"
      }
    },

    "agendas": {
      "$agenda": {
        ".read": "root.child('permissions').child($agenda).hasChild(auth.uid)",
        ".write": "(auth !== null && !data.exists()) || root.child('permissions').child($agenda).child(auth.uid).val() === 'editor'",
        "name": {".validate": "newData.isString()"},
        "$other": {".validate": false}
      }
    },

    "permissions": {
      "$agenda": {
        ".read": "data.hasChild(auth.uid)",
        ".write": "(auth !== null && !data.exists()) || root.child('permissions').child($agenda).child(auth.uid).val() === 'editor'",
        ".validate": "root.child('agendas').hasChild($agenda)",
        "$uid": {
          ".validate": "newData.val() === 'viewer' || newData.val() === 'editor'"
        }
      }
    },

    "categories": {
      "$agenda": {
        ".read": "root.child('permissions').child($agenda).hasChild(auth.uid)",
        ".write": "root.child('permissions').child($agenda).child(auth.uid).val() === 'editor'",
        ".validate": "root.child('agendas').hasChild($agenda)",
        "$category": {
          "name": {
            ".validate": "newData.isString()"
          },
          "color": {
            ".validate": "newData.isString()"
          },
          "$other": {
            ".validate": false
          }
        }
      }
    },

    "tasks": {
      "$agenda": {
        ".read": "root.child('permissions').child($agenda).hasChild(auth.uid)",
        ".write": "root.child('permissions').child($agenda).child(auth.uid).val() === 'editor'",
        ".validate": "root.child('agendas').hasChild($agenda)",
        "$task": {
          "name": {
            ".validate": "newData.isString()"
          },
          "completed": {
            ".validate": "newData.isBoolean()"
          },
          "deadline": {
            ".validate": "newData.isString()"
          },
          "deadlineTime": {
            ".validate": "newData.isBoolean()"
          },
          "category": {
            ".validate": "root.child('categories').child($agenda).hasChild(newData.val())"
          },
          "notes": {
            ".validate": "newData.isString()"
          },
          "repeat": {
            ".validate": "newData.isString()"
          },
          "repeatEnds": {
            ".validate": "newData.isString()"
          },
          "tags": {
            ".validate": "newData.hasChildren()",
            "$tag": {
              ".validate": "root.child('categories').child($agenda).hasChild($tag) && newData.val() === true"
						}
          },
          "$other": {
            ".validate": false
          }
        }
      }
    },

    "schedules": {
      "$agenda": {
        ".read": "root.child('permissions').child($agenda).hasChild(auth.uid)",
        ".write": "root.child('permissions').child($agenda).child(auth.uid).val() === 'editor'",
        ".validate": "root.child('agendas').hasChild($agenda)",
        "blocks": {
          "$block": {
          	"time": {
              ".validate": "newData.isNumber() && newData.val() < 1440"
            },
            "$day": {
              ".validate": "data.parent().parent().parent().child('days').child($day).exists() && root.child('categories').child($agenda).hasChild(newData.val())"
            }
					}
        },
        "days": {
          "$day": {
            ".validate": "newData.isString()"
          }
        },
        "points": {
          "$point": {
            "date": {
              ".validate": "newData.isString()"
            },
            "type": {
              ".validate": "data.parent().parent().parent().child('days').child(newData.val()).exists() || newData.val() == 'free'"
            }
          }
				},
        "$other": {".validate": false}
      }
    },

    ".read": false,
    ".write": false,

    "meow": {
      ".read": true
    }
  }
}
