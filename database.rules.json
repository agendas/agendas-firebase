{
  "rules": {
    "users": {
      "$uid": {
        "username": {
          ".read": "auth !== null",
          ".write": "$uid === auth.uid && (!data.exists() || !root.child('usernames').child(data.val()).exists())",
          ".validate": "newData.isString() && newData.val().length < 50"
        },
        "createdApps": {
          ".read": "$uid === auth.uid",
          "$app": {
            ".write": "!(root.child('apps').child($app).exists() || newData.exists())",
            ".validate": "newData.isBoolean() && newData.val() === true"
          }
        },
        "maxApps": {
          ".read": "$uid === auth.uid"
				},
        "maxAppsRequest": {
          ".read": "$uid === auth.uid",
          ".write": "$uid === auth.uid",
          ".validate": "newData.hasChildren(['email', 'amount', 'reason'])",
          "email": {
            ".validate": "newData.isString() && newData.val().length < 200"
          },
          "amount": {
            ".validate": "newData.isNumber()"
          },
          "reason": {
            ".validate": "newData.isString() && newData.val().length <= 1000"
          },
          "$other": {
            ".validate": false
          }
        },
        "apps": {
          ".read": "$uid === auth.uid",
          ".validate": "newData.hasChildren()",
          "$app": {
            ".write": "$uid === auth.uid && !newData.exists()",
            ".validate": "newData.hasChildren() && root.child('apps').child($app).exists()",
            "scopes": {
              ".write": "$uid === auth.uid",
              ".validate": "newData.hasChildren()",
              "$scope": {
                ".validate": "newData.isBoolean() && newData.val() === true"
							}
            },
            "$other": {
              ".validate": false
            }
          }
				},
        "setupComplete": {
          ".read": "$uid === auth.uid",
          ".write": "$uid === auth.uid",
          ".validate": "newData.val() === true"
        },
        "isDeveloper": {
          ".read": "$uid === auth.uid",
          ".write": "$uid === auth.uid",
          ".validate": "newData.val() === true"
        }
      }
    },

    "apps": {
			"$app": {
        "owner": {
          ".read": "auth !== null",
          ".write": "root.child('users').child(auth.uid).child('createdApps').hasChild($app) && newData.exists()",
          ".validate": "newData.isString() && newData.val() === auth.uid"
				},
        "name": {
          ".read": "auth !== null",
          ".write": "data.parent().child('owner').val() === auth.uid"
        },
        "oauth": {
          "redirectURL": {
            ".write": "data.parent().parent().child('owner').val() === auth.uid",
            ".validate": "newData.isString() && newData.val().length < 1000"
					},
          "secret": {
            ".write": "data.parent().parent().child('owner').val() === auth.uid && !newData.exists()"
          }
        },
        "request": {
          ".write": "data.parent().child('owner').val() === auth.uid",
          ".validate": "newData.hasChildren(['email', 'amount', 'reason'])",
          "email": {
            ".validate": "newData.isString() && newData.val().length < 200"
          },
          "amount": {
            ".validate": "newData.isNumber()"
          },
          "reason": {
            ".validate": "newData.isString() && newData.val().length <= 1000"
          },
          "$other": {
            ".validate": false
          }
        },
        ".read": "data.child('owner').val() === auth.uid",
        ".write": "root.child('users').child(auth.uid).child('createdApps').hasChild($app) && !newData.exists()"
      }
		},

    "usernames": {
      "$username": {
        ".read": "auth !== null",
        ".write": "!data.exists() || data.val() === auth.uid",
        ".validate": "newData.val() === auth.uid && root.child('users').child(auth.uid).child('username').val() === $username"
      }
    },

    ".read": false,
    ".write": false,

    "meow": {
      ".read": true
    }
  }
}
