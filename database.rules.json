{
  "rules": {
    "users": {
      "$uid": {
        "username": {
          ".read": "auth !== null",
          ".write": "$uid === auth.uid && (!data.exists() || root.child('usernames').child(data.val()).exists())",
          ".validate": "newData.isString() && newData.val().length < 50"
        },
				"agendas": {
          ".read": "$uid === auth.uid",
          ".write": "$uid === auth.uid",
          "root": {
            "$child": {
              ".validate": "root.child('permissions').child($child).hasChild($uid)"
            }
          },
          "$agenda": {
            ".validate": "root.child('permissions').child($agenda).hasChild($uid)",
            "$child": {
              ".validate": "root.child('permissions').child($child).hasChild($uid)"
            }
          }
        },
        "settings": {
          ".read": "$uid === auth.uid",
          ".write": "$uid === auth.uid",
          "wallpaper": {
            ".validate": "newData.isString() && newData.val().length < 500"
          },
          "alwaysShowCompleted": {
            ".validate": "newData.isBoolean()"
					},
          "schedules": {
            ".validate": "newData.isBoolean()"
          },
          "theme": {
            ".validate": "(newData.val() === 'default') || (data.parent().parent().child('premium').exists() && (newData.val() === 'dark' || newData.val() === 'forest' || newData.val() === 'ocean'))"
          },
          "$other": {
            ".validate": false
          }
        },
        "premium": {
          ".read": "$uid === auth.uid"
        }
      }
    },

    "usernames": {
      "$username": {
        ".read": "auth !== null",
        ".write": "!data.exists() || data.val() === auth.uid",
        ".validate": "newData.val() === auth.uid && root.child('users').child(auth.uid).child('username').val() === $username"
      }
    },

    "agendas": {
      "$agenda": {
        ".read": "root.child('permissions').child($agenda).hasChild(auth.uid)",
        ".write": "(auth !== null && !data.exists()) || root.child('permissions').child($agenda).child(auth.uid).val() === 'editor'",
        "name": {".validate": "newData.isString()"},
        "$other": {".validate": false}
      }
    },

    "permissions": {
      "$agenda": {
        ".read": "data.hasChild(auth.uid)",
        ".write": "(auth !== null && !data.exists()) || root.child('permissions').child($agenda).child(auth.uid).val() === 'editor'",
        ".validate": "root.child('agendas').hasChild($agenda)",
        "$uid": {
          ".validate": "newData.val() === 'viewer' || newData.val() === 'editor'"
        },
      }
    },

    "tasks": {
      "$agenda": {
        ".read": "root.child('permissions').child($agenda).hasChild(auth.uid)",
        ".write": "root.child('permissions').child($agenda).child(auth.uid).val() === 'editor'",
        ".validate": "root.child('agendas').hasChild($agenda)",
        "$task": {
          "name": {
            ".validate": "newData.isString()"
          },
          "completed": {
            ".validate": "newData.isBoolean()"
          },
          "deadline": {
            ".validate": "newData.isString()"
          },
          "deadlineTime": {
            ".validate": "newData.isBoolean()"
          },
          "notes": {
            ".validate": "newData.isString()"
          },
          "repeat": {
            ".validate": "newData.isString()"
          },
          "repeatEnds": {
            ".validate": "newData.isString()"
          },
          "$other": {
            ".validate": false
          }
        },
      }
    },

    "schedules": {
      "$agenda": {
        ".read": "root.child('permissions').child($agenda).hasChild(auth.uid)",
        ".write": "root.child('permissions').child($agenda).child(auth.uid).val() === 'editor'",
        ".validate": "root.child('agendas').hasChild($agenda)",
        "blocks": {
          "$block": {
          	"time": {
              ".validate": "newData.isNumber() && newData.val() < 1440"
            },
            "$day": {
              ".validate": "data.parent().parent().parent().child('days').child($day).exists() && root.child('categories').child($agenda).hasChild(newData.val())"
            }
					}
        },
        "days": {
          "$day": {
            ".validate": "newData.isString()"
          }
        },
        "points": {
          "$point": {
            "date": {
              ".validate": "newData.isString()"
            },
            "type": {
              ".validate": "data.parent().parent().parent().child('days').child(newData.val()).exists() || newData.val() == 'free'"
            }
          }
				},
        "$other": {".validate": false}
      }
    },

    ".read": false,
    ".write": false,

    "meow": {
      ".read": true
    }
  }
}
